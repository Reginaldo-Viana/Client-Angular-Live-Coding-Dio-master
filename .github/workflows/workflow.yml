name: CI/CD Angular

on:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: ['16']

    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js environment
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
          cache: 'npm'
      - name: Install dependencies
        run: npm install
      - name: Build Angular application
        run: ng build --prod
  test:
    runs-on: ubuntu-latest
    needs: build  # aguarda término do job 'build'
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js environment
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
          cache: 'npm'
      - name: Install dependencies
        run: npm install
      - name: Run tests
        run: ng test --coverage
  deploy:  # deploy opcional para ambiente de staging
    runs-on: ubuntu-latest
    needs: test  # aguarda término do job 'test'
    if: success()  # somente executa se todos os jobs anteriores tiverem sucesso
    steps:
      - uses: actions/checkout@v3
      - name: Deploy to staging server (opcional)
        uses: actions/deploy-ssh@v2  # exemplo usando SSH
        with:
          host: ${{ secrets.SERVER_HOST }}  # segredo armazenado no GitHub
          username: ${{ secrets.SERVER_USERNAME }}
          privateKey: ${{ secrets.SERVER_SSH_KEY }}  # chave SSH privada armazenada como segredo
          remotePath: /var/www/seu_aplicativo  # caminho no servidor
          on:
            push:
              branches: [ main ]  # somente deploy em push para branch main
